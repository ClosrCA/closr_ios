//
// EventAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EventAPI: APIBase {
    /**

     - parameter authorization: (header)  
     - parameter eventCreate: (body) Event body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEvent(authorization: String, eventCreate: EventCreate, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        createEventWithRequestBuilder(authorization: authorization, eventCreate: eventCreate).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /events/
     - Create event with authorized user
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter authorization: (header)  
     - parameter eventCreate: (body) Event body 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func createEventWithRequestBuilder(authorization: String, eventCreate: EventCreate) -> RequestBuilder<SuccessResponse> {
        let path = "/events/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = eventCreate.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter authorization: (header)  
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(authorization: String, id: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(authorization: authorization, id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - DELETE /events/{id}
     - delete a single event by mongo id
     
     - parameter authorization: (header)  
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(authorization: String, id: String) -> RequestBuilder<Void> {
        var path = "/events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter page: (query)  
     - parameter pageSize: (query)  
     - parameter radius: (query) we are using meter as base UNIT 
     - parameter lat: (query)  (optional)
     - parameter lng: (query)  (optional)
     - parameter search: (query) match event title or description (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEvents(page: Double, pageSize: Double, radius: Double, lat: Double? = nil, lng: Double? = nil, search: String? = nil, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        getEventsWithRequestBuilder(page: page, pageSize: pageSize, radius: radius, lat: lat, lng: lng, search: search).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /events/
     - get pagenated events within a radius or by created time if user location is not provided
     - examples: [{contentType=application/json, example={
  "events" : [ {
    "hasFinished" : true,
    "gender" : "aeiou",
    "lng" : 5.962133916683182377482808078639209270477294921875,
    "purpose" : "aeiou",
    "attendees" : [ {
      "birthday" : "aeiou",
      "firstname" : "aeiou",
      "gender" : "aeiou",
      "displayName" : "aeiou",
      "facebookID" : "aeiou",
      "avatar" : "aeiou",
      "lastname" : "aeiou",
      "createdAt" : "aeiou",
      "firebaseID" : "aeiou",
      "phone" : "aeiou",
      "id" : "aeiou",
      "email" : "aeiou",
      "updatedAt" : "aeiou"
    } ],
    "author" : "",
    "description" : "aeiou",
    "title" : "aeiou",
    "capacity" : 1.46581298050294517310021547018550336360931396484375,
    "createdAt" : "aeiou",
    "isDeleted" : true,
    "maxAge" : 6.02745618307040320615897144307382404804229736328125,
    "yelpID" : "aeiou",
    "minAge" : 0.80082819046101150206595775671303272247314453125,
    "startTime" : "aeiou",
    "id" : "aeiou",
    "lat" : 5.63737665663332876420099637471139430999755859375,
    "updatedAt" : "aeiou"
  } ]
}}]
     
     - parameter page: (query)  
     - parameter pageSize: (query)  
     - parameter radius: (query) we are using meter as base UNIT 
     - parameter lat: (query)  (optional)
     - parameter lng: (query)  (optional)
     - parameter search: (query) match event title or description (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getEventsWithRequestBuilder(page: Double, pageSize: Double, radius: Double, lat: Double? = nil, lng: Double? = nil, search: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/events/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "page": page, 
            "pageSize": pageSize, 
            "lat": lat, 
            "lng": lng, 
            "radius": radius, 
            "search": search
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOne(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        getOneWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /events/{id}
     - get a single event by mongo id
     - examples: [{contentType=application/json, example={
  "events" : [ {
    "hasFinished" : true,
    "gender" : "aeiou",
    "lng" : 5.962133916683182377482808078639209270477294921875,
    "purpose" : "aeiou",
    "attendees" : [ {
      "birthday" : "aeiou",
      "firstname" : "aeiou",
      "gender" : "aeiou",
      "displayName" : "aeiou",
      "facebookID" : "aeiou",
      "avatar" : "aeiou",
      "lastname" : "aeiou",
      "createdAt" : "aeiou",
      "firebaseID" : "aeiou",
      "phone" : "aeiou",
      "id" : "aeiou",
      "email" : "aeiou",
      "updatedAt" : "aeiou"
    } ],
    "author" : "",
    "description" : "aeiou",
    "title" : "aeiou",
    "capacity" : 1.46581298050294517310021547018550336360931396484375,
    "createdAt" : "aeiou",
    "isDeleted" : true,
    "maxAge" : 6.02745618307040320615897144307382404804229736328125,
    "yelpID" : "aeiou",
    "minAge" : 0.80082819046101150206595775671303272247314453125,
    "startTime" : "aeiou",
    "id" : "aeiou",
    "lat" : 5.63737665663332876420099637471139430999755859375,
    "updatedAt" : "aeiou"
  } ]
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getOneWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) event id 
     - parameter authorization: (header)  
     - parameter eventUpdate: (body) event body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(id: String, authorization: String, eventUpdate: EventUpdate, completion: @escaping ((_ error: Error?) -> Void)) {
        updateWithRequestBuilder(id: id, authorization: authorization, eventUpdate: eventUpdate).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - PUT /events/{id}
     - update a single event by mongo id
     
     - parameter id: (path) event id 
     - parameter authorization: (header)  
     - parameter eventUpdate: (body) event body 

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(id: String, authorization: String, eventUpdate: EventUpdate) -> RequestBuilder<Void> {
        var path = "/events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = eventUpdate.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
