//
// AuthenticationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthenticationAPI: APIBase {
    /**

     - parameter authBody: (body) facebook token from fb 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func facebookLogin(authBody: AuthBody, completion: @escaping ((_ data: LoginResponse?,_ error: Error?) -> Void)) {
        facebookLoginWithRequestBuilder(authBody: authBody).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /login/facebook
     - Returns user's profile and auth token
     - examples: [{contentType=application/json, example={
  "profile" : {
    "birthday" : "aeiou",
    "firstname" : "aeiou",
    "gender" : "aeiou",
    "displayName" : "aeiou",
    "facebookID" : "aeiou",
    "avatar" : "aeiou",
    "lastname" : "aeiou",
    "createdAt" : "aeiou",
    "firebaseID" : "aeiou",
    "phone" : "aeiou",
    "id" : "aeiou",
    "email" : "aeiou",
    "updatedAt" : "aeiou"
  },
  "isNewUser" : true,
  "token" : "aeiou"
}}]
     
     - parameter authBody: (body) facebook token from fb 

     - returns: RequestBuilder<LoginResponse> 
     */
    open class func facebookLoginWithRequestBuilder(authBody: AuthBody) -> RequestBuilder<LoginResponse> {
        let path = "/login/facebook"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = authBody.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoginResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter authorization: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMyProfile(authorization: String, completion: @escaping ((_ data: Profile?,_ error: Error?) -> Void)) {
        getMyProfileWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /profile
     - Returns user's profile
     - examples: [{contentType=application/json, example={
  "birthday" : "aeiou",
  "firstname" : "aeiou",
  "gender" : "aeiou",
  "displayName" : "aeiou",
  "facebookID" : "aeiou",
  "avatar" : "aeiou",
  "lastname" : "aeiou",
  "createdAt" : "aeiou",
  "firebaseID" : "aeiou",
  "phone" : "aeiou",
  "id" : "aeiou",
  "email" : "aeiou",
  "updatedAt" : "aeiou"
}}]
     
     - parameter authorization: (header)  

     - returns: RequestBuilder<Profile> 
     */
    open class func getMyProfileWithRequestBuilder(authorization: String) -> RequestBuilder<Profile> {
        let path = "/profile"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Profile>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter authorization: (header)  
     - parameter profileUpdate: (body) update user&#39;s profile 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProfile(authorization: String, profileUpdate: ProfileUpdate, completion: @escaping ((_ error: Error?) -> Void)) {
        updateProfileWithRequestBuilder(authorization: authorization, profileUpdate: profileUpdate).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - PUT /profile
     - Returns user's profile
     
     - parameter authorization: (header)  
     - parameter profileUpdate: (body) update user&#39;s profile 

     - returns: RequestBuilder<Void> 
     */
    open class func updateProfileWithRequestBuilder(authorization: String, profileUpdate: ProfileUpdate) -> RequestBuilder<Void> {
        let path = "/profile"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = profileUpdate.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter authorization: (header)  
     - parameter upload: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadAvatar(authorization: String, upload: URL, completion: @escaping ((_ error: Error?) -> Void)) {
        uploadAvatarWithRequestBuilder(authorization: authorization, upload: upload).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /profile
     - upload user's avatar
     
     - parameter authorization: (header)  
     - parameter upload: (form)  

     - returns: RequestBuilder<Void> 
     */
    open class func uploadAvatarWithRequestBuilder(authorization: String, upload: URL) -> RequestBuilder<Void> {
        let path = "/profile"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "upload": upload
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
